#!/usr/bin/env python3

"""Project Euler Problem 12

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five
hundred divisors?
"""

from itertools import chain, count, combinations
from functools import reduce
from operator import mul


def triangles():
    """Generate triangle numbers."""
    total = 0
    for i in count(1):
        total += i
        yield total


def primes():
    """Generate the primes in order.

    Cache all generated primes to speed up further generations.
    """
    if not hasattr(primes, 'cache'):
        primes.cache = []

    yield from primes.cache

    i = primes.cache[-1] if primes.cache else 2
    while True:
        if not any(i % prime == 0 for prime in primes.cache):
            primes.cache.append(i)
            yield i
        i += 1


def factorize(number):
    """Find the prime factors of a number."""
    for prime in primes():
        if number ==  1 or number == prime:
            return (number,)
        else:
            if number % prime == 0:
                return (prime,) + factorize(number//prime)


def factors(number):
    """Find all the factors (prime or not) of a number."""
    factors = {1}  # The multiplicative identity is always a factor

    factorization = factorize(number)

    for i in range(1, len(factorization) + 1):
        for combination in combinations(factorization, i):
            factors.add(reduce(mul, combination))

    return factors


def solve():
    """Solve the problem."""
    for triangle in triangles():
        if len(factors(triangle)) > 500:
            return triangle


if __name__ == '__main__':
    print(__doc__)
    print(solve())
